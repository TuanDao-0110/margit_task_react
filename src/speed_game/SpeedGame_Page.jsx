import { type } from "@testing-library/user-event/dist/type";
import Modal from "./modal/Modal";
import React, { Component } from "react";
import style from "./css/speedgame.module.css";
import { MULTIPLY, PLUS, DIVIDE, MINUS } from "./formula/formula";
import Time from "./Time";
export default class SpeedGame_Page extends Component {
  state = {
    time: 5, // default time
    score: 0, // final score is added when user give correct answer
    numberLength: 1, // length of interger number chosen by user
    firstNum: 1, // 1 number generated by application
    secondNum: 1, // 2nd number generated by application
    correctResult: 1, // correctResult to compare when calculate 2 nunber react
    formula: PLUS, // plus + minus + multiply + divide
    round: 1, // round left when user can not answer before time run out/
    speed: 1, // speed is chosen by user
    scoreRatio: 1, // reflect user score as fast/difficulty ==> got more point
    userAnswer: 0, // user answer
    modal: false,
    result: false,
    startGame: false,
  };
  // 1. set time
  // 2. press start to run
  // 3. auto give 1 vs 2 number ==> calculate correct rersult firstNum
  // 4. time run off from time default
  // 5. user have to give the answer for the QUESTION before the time run off
  // 6. user have 3 round
  // 6.1 if you have correct answer ==> it will auto move to the next question ==> add score for user ==> score += scoreRation ==> it will get bigger depend on how far or how fast you can go
  // 6.2 if you have wrong anseer ==> it will remove 1 round out ==> if round ===0 ==> user lose ==> show the modal

  // 1. calculte scoreRatio
  calculteScoreRatio = () => {
    let { speed, numberLength, formula } = { ...this.state };
    switch (formula) {
      case MULTIPLY:
        this.setState({ ...this.state, scoreRatio: speed * numberLength * 3 });
        return;
      case DIVIDE:
        this.setState({ ...this.state, scoreRatio: speed * numberLength * 3 });
        return;
      case MINUS:
        this.setState({ ...this.state, scoreRatio: speed * numberLength * 2 });
        return;
      default:
        this.setState({
          // ...this.state,
          scoreRatio: speed * numberLength,
        });
        return;
    }
  };
  // 2. calculate 2 number
  calculateNumber = () => {
    console.log("calculate number");
    // const { firstNum, secondNum, formula } = { ...this.state };
    switch (this.state.formula) {
      case MULTIPLY:
        // this.setState({ correctResult: firstNum * secondNum });
        return;
      case DIVIDE:
        // let result = Math.floor(firstNum / secondNum);
        // this.setState({ correctResult: result });
        return;
      case MINUS:
        // this.setState({ correctResult: firstNum - secondNum });
        return;
      default:
        this.setState({ correctResult: this.state.firstNum + this.state.secondNum });
        // this.setState({ ...this.state, correctResult: 4 });
        console.log(this.state);
        return;
    }
  };
  // 3. compare user's answer vs  correctAnswer ==> it compare vs set time back to 5 if user still have round/correct -
  // otherwise it will return stop game ==> return modal
  compareResult = () => {
    console.log("compare");
    // let { userAnswer, correctResult, round, score, result } = { ...this.state };
    // compare user' answer vs correct answer
    //  function on active when the time =0
    //    3.1 check that user is correct  ?
    console.log(this.state);
    if (this.state.userAnswer === this.state.correctResult) {
      let { score: temp } = this.state;
      temp = temp + 1;
      this.setState({
        score: temp,
        result: true,
        time: 5,
      });
      return this.setUpNumber();
    }
    // 3.2 if wrong ==> remove 1 round
    else if (this.state.userAnswer !== this.state.correctResult) {
      if (this.state.round !== 0) {
        let { round: temp } = this.state;
        temp = temp - 1;
        this.setState({
          round: temp,
          result: false,
          time: 5,
        });
        return this.setUpNumber();
      } else {
        return this.setState({
          // ...this.state,
          modal: true,
          result: false,
          startGame: false,
        });
      }
    }
  };
  //4. time count down   ==> also compare auto when it turn 0 ==> move to the next if player answers correct
  countDown = () => {
    let setSpeed = (1000 / this.state.speed).toFixed(0);
    let { time } = this.state;
    if (time >= 0) {
      setTimeout(() => {
        this.setState({
          // ...this.state,
          time: time - 1,
        });
      }, setSpeed);
    } else {
      this.compareResult();
    }
  };

  //5. set speed :
  setSpeed = (e) => {
    this.setState({
      // ...this.state,
      speed: e.target.value,
    });
  };
  // 7. generate number 2nd
  setUpNumber = () => {
    let n = this.state.numberLength;
    let length = "1";
    while (n > 0) {
      n--;
      length += "0";
    }
    let numberLength = Number(length) + 1;
    this.setState({
      // ...this.state,
      firstNum: Math.floor(Math.random() * numberLength),
      secondNum: Math.floor(Math.random() * numberLength),
    });
  };
  // 6 submit you anwser
  handleSubmit = (e) => {
    e.preventDefault();
  };
  // 8. set up length
  setUpNumberLength = (e) => {
    this.setState({
      // ...this.state,
      numberLength: e.target.value,
    });
  };

  //9. set up your answer :
  setUpanswer = (e) => this.setState({ userAnswer: e.target.value });

  // 10. set start/stop function :
  start = () => {
   
    this.setState({
      startGame: true,
    });
  };
  stop = () => {
    this.setState({
      startGame: false,
    });
  };
  // 11.
  setUp = () => {
    let { startGame } = this.state;
    if (startGame) {
      this.countDown();
    }
  };
  // 12. close modal
  closeModal = () => {
    this.setState({
      modal: false,
    });
  };

  render() {
    return (
      <div className={style["main"]}>
        {this.setUp()}
        <div className="w-3/4 m-auto">
          <h1 className="text-center text-3xl text-blue-300"> speed game </h1>
          {/* game setting  */}
          <div>
            <div>
              Time
              {/* <p>{this.state.time}</p> */}
              <Time time={this.state.time}></Time>
              speed <p>{this.state.speed}</p>
            </div>

            <div>
              <label htmlFor="">set speed</label>
              <input type="number" onChange={this.setSpeed} />
            </div>
            <div>
              <label htmlFor="">set up number length</label>
              <input
                type="number"
                onChange={(e) => {
                  this.setUpNumberLength(e);
                }}
              />
            </div>
          </div>
          {/* game display includes  formula vs user input  */}
          <div>
            <p>
              {this.state.firstNum} + {this.state.secondNum} = {this.state.time !== 0 ? "?" : this.state.correctResult}
            </p>
            <button onClick={this.setUpNumber}>set up number</button>
            <p>your answer</p>
            <form onSubmit={this.handleSubmit}>
              <input
                type="number"
                name=""
                id=""
                min={0}
                onChange={(e) => {
                  this.setState({
                    // ...this.state,
                    userAnswer: Number(e.target.value),
                  });
                }}
              />
              <button className="bg-blue-300 p-4 rounded-md">answer</button>
            </form>
            <div>
              result : <span>{!this.state.result ? "wrong" : "true"}</span>
              <div>correct result :{this.state.correctResult}</div>
              <div> user answer : {this.state.userAnswer}</div>
              <div>your round : {this.state.round}</div>
              <div>your score : {this.state.score}</div>
            </div>
            <button
              onClick={() => {
                this.start();
              }}
            >
              Start
            </button>
            --------
            <button
              onClick={() => {
                this.stop();
              }}
            >
              stop
            </button>
          </div>
        </div>
        <Modal display={this.state.modal} closeModal={this.closeModal} score={this.state.score}></Modal>
      </div>
    );
  }
}
